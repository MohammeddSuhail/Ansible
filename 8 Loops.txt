---
hosts: webservers 
become: yes 

vars: 
  packages : [git, vim, ruby] 

tasks : 
 
  - name: Install packages 
    apt : 
      name : '{{item}}' 
      state : latest 
    with_items : '{{packages}}' 





above looping is depracated, below is the new way


---
hosts: webservers 
become: yes 

vars: 
  packages : [git, vim, ruby] 

tasks : 
 
  - name: Install packages 
    apt : 
      name : '{{packages}}' 
      state : latest 















hosts: webservers 
become: yes 

vars: 
  websites: 
    aws_sites: 
      author : asequeira 
      author_id : as001 
    ms_sites: 
      author: bsmith 
      author_id : bs002 
    google_sites: 
      author: psmith
      author_id : ps001 

tasks : 

  - name: Print data 
    debug:  
      msg : "Here are the results : {{item.value.author_id}}" 
    with_dict : '{{websites}}' 
    when : 'item.value.author_id == "as001"






















my examples:


looping an array:
  - name: "Print data"
    ansible.builtin.shell:
      cmd: echo "{{item}}" >> res.txt
    when: '{{ item.Customer == "xyz" }}'
    with_items: '{{custu.list}}'
    register: re


looping an dictionary and accessing key and value:
  - name: "working the required record"
    debug:
      msg: "{{item.key}}     {{item.value}}"
    when: '{{ item.value == "a" }}'
    loop: "{{ rec | dict2items}}"






loop_control:
the loop_control option can be used to specify the name of the variable to be used for the loop

ex:
- name: Find correct customer in csv and set_fact
  set_fact:
    correctCust: "{{cust}}"
  when: cust.Customer == customer_name
  loop: "{{ custlist.list }}"
  loop_control:
    loop_var: cust

